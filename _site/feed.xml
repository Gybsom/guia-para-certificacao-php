<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Guia para cerficação PHP</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>alefcastelo.github.io/zce-book/</link>
    <atom:link href="alefcastelo.github.io/zce-book/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 29 Jul 2016 13:39:26 -0300</pubDate>
    <lastBuildDate>Fri, 29 Jul 2016 13:39:26 -0300</lastBuildDate>
    <generator>Jekyll v3.2.0</generator>
    
      <item>
        <title>Sumario</title>
        <description>
&lt;h1 id=&quot;zce-book&quot;&gt;ZCE BOOK&lt;/h1&gt;

&lt;p&gt;Olá, esse e um repositório a qual eu gostaria de falar sobre &lt;a href=&quot;http://www.php.net/&quot;&gt;PHP&lt;/a&gt;, uma especie de blog ou livro, onde eu irei postar sobre conteúdo que acredito que seja importante a todo programador PHP. Então como esse repositório é focado em PHP, tentarei seguir a ementa de estudo para quem quer se torna um &lt;a href=&quot;http://www.zend.com/en/services/certification/php-5-certification&quot;&gt;ZCE&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Aqui está um &lt;a href=&quot;./motivacao.html&quot;&gt;link com a minha motivação&lt;/a&gt; e por que acredito que vale pena tirar certificação.&lt;/p&gt;

&lt;p&gt;Outra coisa que gostaria de deixar claro, é o motivo porque nem tudo aqui deixarei em português, por exemplo: os tópicos que serão abordados na prova, &lt;code class=&quot;highlighter-rouge&quot;&gt;PHP Basics&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Control Structures&lt;/code&gt; e etc. A prova é totalmente inglês e acredito que no minimo os tópicos devem ser conhecidos em inglês.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;php-basics/index.html&quot;&gt;PHP Basics&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;php-basics/syntax.html&quot;&gt;Syntax&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;php-basics/variables.html&quot;&gt;Variables&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Operators&lt;/li&gt;
      &lt;li&gt;Control Structures&lt;/li&gt;
      &lt;li&gt;Language Constructs and Functions&lt;/li&gt;
      &lt;li&gt;Namespaces&lt;/li&gt;
      &lt;li&gt;Extensions&lt;/li&gt;
      &lt;li&gt;Config&lt;/li&gt;
      &lt;li&gt;Performance/bytecode caching&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;strings-&amp;amp;-patterns/readme.html&quot;&gt;Strings &amp;amp; Patterns&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Quoting&lt;/li&gt;
      &lt;li&gt;Matching&lt;/li&gt;
      &lt;li&gt;Extracting&lt;/li&gt;
      &lt;li&gt;Searching&lt;/li&gt;
      &lt;li&gt;Replacing&lt;/li&gt;
      &lt;li&gt;Formatting&lt;/li&gt;
      &lt;li&gt;PCRE&lt;/li&gt;
      &lt;li&gt;NOWDOC&lt;/li&gt;
      &lt;li&gt;Encodings&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;arrays/readme.html&quot;&gt;Arrays&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Associative Arrays&lt;/li&gt;
      &lt;li&gt;Array Iteration&lt;/li&gt;
      &lt;li&gt;Array Functions&lt;/li&gt;
      &lt;li&gt;SPL, Objects as arrays&lt;/li&gt;
      &lt;li&gt;Casting&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;data-format-&amp;amp;-types/readme.html&quot;&gt;Data Format &amp;amp; Types&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;XML Basics&lt;/li&gt;
      &lt;li&gt;SimpleXML&lt;/li&gt;
      &lt;li&gt;XML Extension&lt;/li&gt;
      &lt;li&gt;Webservices Basics&lt;/li&gt;
      &lt;li&gt;SOAP&lt;/li&gt;
      &lt;li&gt;JSON&lt;/li&gt;
      &lt;li&gt;DateTime&lt;/li&gt;
      &lt;li&gt;DOMDocument&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;web-features/readme.html&quot;&gt;Web Features&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Sessions&lt;/li&gt;
      &lt;li&gt;Forms&lt;/li&gt;
      &lt;li&gt;GET and POST data&lt;/li&gt;
      &lt;li&gt;Cookies&lt;/li&gt;
      &lt;li&gt;HTTP Headers&lt;/li&gt;
      &lt;li&gt;HTTP Authentication&lt;/li&gt;
      &lt;li&gt;HTTP Status Codes&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;functions/readme.html&quot;&gt;Functions&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Arguments&lt;/li&gt;
      &lt;li&gt;Variables&lt;/li&gt;
      &lt;li&gt;References&lt;/li&gt;
      &lt;li&gt;Returns&lt;/li&gt;
      &lt;li&gt;Variable Scope&lt;/li&gt;
      &lt;li&gt;Anonymous Functions, closures&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;io/readme.html&quot;&gt;I/O&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Files&lt;/li&gt;
      &lt;li&gt;Reading&lt;/li&gt;
      &lt;li&gt;Writing&lt;/li&gt;
      &lt;li&gt;File System Functions&lt;/li&gt;
      &lt;li&gt;Streams&lt;/li&gt;
      &lt;li&gt;Contexts&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;object-oriented-programming/readme.html&quot;&gt;Object Oriented Programming&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Instantiation&lt;/li&gt;
      &lt;li&gt;Modifiers/Inheritance&lt;/li&gt;
      &lt;li&gt;Interfaces&lt;/li&gt;
      &lt;li&gt;Exceptions&lt;/li&gt;
      &lt;li&gt;Autoload&lt;/li&gt;
      &lt;li&gt;Reflection&lt;/li&gt;
      &lt;li&gt;Type Hinting&lt;/li&gt;
      &lt;li&gt;Class Constants&lt;/li&gt;
      &lt;li&gt;Late Static Binding&lt;/li&gt;
      &lt;li&gt;Magic (_*) Methods&lt;/li&gt;
      &lt;li&gt;Instance Methods &amp;amp; Properties&lt;/li&gt;
      &lt;li&gt;SPL&lt;/li&gt;
      &lt;li&gt;Traits&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;databases-&amp;amp;-sql/readme.html&quot;&gt;Databases &amp;amp; SQL&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;SQL&lt;/li&gt;
      &lt;li&gt;Joins&lt;/li&gt;
      &lt;li&gt;Prepared Statements&lt;/li&gt;
      &lt;li&gt;Transactions&lt;/li&gt;
      &lt;li&gt;PDO&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;security/readme.html&quot;&gt;Security&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Configuration&lt;/li&gt;
      &lt;li&gt;Session Security&lt;/li&gt;
      &lt;li&gt;Cross-Site Scripting&lt;/li&gt;
      &lt;li&gt;Cross-Site Request Forgeries&lt;/li&gt;
      &lt;li&gt;SQL Injection&lt;/li&gt;
      &lt;li&gt;Remote Code Injection&lt;/li&gt;
      &lt;li&gt;Email Injection&lt;/li&gt;
      &lt;li&gt;Filter Input&lt;/li&gt;
      &lt;li&gt;Escape Output&lt;/li&gt;
      &lt;li&gt;Encryption, Hashing algorithms&lt;/li&gt;
      &lt;li&gt;File uploads&lt;/li&gt;
      &lt;li&gt;PHP Configuration&lt;/li&gt;
      &lt;li&gt;Password hashing API&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A idéia final é ter um estudo e compartilhamento de conteúdo, para todos aqueles que gostaria de focar o aprendizado rápido do PHP, e também fazer um estudo para quem quer tirar certificação, assim como eu.&lt;/p&gt;
</description>
        <pubDate>Fri, 29 Jul 2016 13:39:26 -0300</pubDate>
        <link>alefcastelo.github.io/zce-book/sumario.html</link>
        <guid isPermaLink="true">alefcastelo.github.io/zce-book/sumario.html</guid>
        
        
      </item>
    
      <item>
        <title>PHP Basics</title>
        <description>&lt;h1 id=&quot;php-basics&quot;&gt;PHP Basics&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;./syntax.html&quot;&gt;Syntax&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./variables.html&quot;&gt;Variables&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Operators&lt;/li&gt;
  &lt;li&gt;Control Structures&lt;/li&gt;
  &lt;li&gt;Language Constructs and Functions&lt;/li&gt;
  &lt;li&gt;Namespaces&lt;/li&gt;
  &lt;li&gt;Extensions&lt;/li&gt;
  &lt;li&gt;Config&lt;/li&gt;
  &lt;li&gt;Performance/bytecode caching&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 29 Jul 2016 13:14:27 -0300</pubDate>
        <link>alefcastelo.github.io/zce-book/php-basics/index.html</link>
        <guid isPermaLink="true">alefcastelo.github.io/zce-book/php-basics/index.html</guid>
        
        
        <category>php-basics</category>
        
      </item>
    
      <item>
        <title>Syntax</title>
        <description>&lt;h1 id=&quot;syntax&quot;&gt;Syntax&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#php&quot;&gt;PHP&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tags&quot;&gt;Tags&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#problema-com-as-tags&quot;&gt;Problema com as Tags&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#aspas&quot;&gt;Aspas&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#concatenação-de-strings&quot;&gt;Concatenação de Strings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#comentários&quot;&gt;Comentários&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#bloco-de-codigo&quot;&gt;Bloco de código&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#o-interpretador-php&quot;&gt;O interpretador PHP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;php&quot;&gt;PHP&lt;/h2&gt;
&lt;p&gt;O PHP (um acrônimo recursivo para PHP: Hypertext Preprocessor) é uma linguagem de script open source de uso geral, muito utilizada, e especialmente adequada para o desenvolvimento web. A melhor coisa em usar o PHP é que ele é extremamente simples para um iniciante, mas oferece muitos recursos para um programador profissional.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;tags&quot;&gt;Tags&lt;/h2&gt;
&lt;p&gt;O PHP tem como sintaxe básica, tags de abertura representado por &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;?php&lt;/code&gt; e fechamento &lt;code class=&quot;highlighter-rouge&quot;&gt;?&amp;gt;&lt;/code&gt; como default do interpretador. O interpretador busca por essas tags dentro do arquivo e se achar ele interpreta os comandos dentro das tags e retorna a resposta na saida do documento. Com essa forma de interpretar, o PHP possui a possibilidade de ser facilmente incluído em vários tipos de documento.&lt;/p&gt;

&lt;p&gt;Exemplo da mesclagem com HTML:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-HTML&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;&amp;lt;?php print &quot;Titulo da pagina&quot; ?&amp;gt;&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;?= &quot;conteúdo do site&quot; ?&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A saída desse código é:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-HTML&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;Titulo da pagina&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    conteúdo do site
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Repare também que foi usado duas formas diferente de exibir uma string na saída do interpretador. A primeira foi &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;?php print &quot;Titulo da pagina&quot; ?&amp;gt;&lt;/code&gt; e a segunda foi &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;?= &quot;conteúdo do site&quot; ?&amp;gt;&lt;/code&gt;. 
Isso só é possível por que o PHP possui outros tipos de tags a qual o interpretador entende que naquele bloco é um código php.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Standard Tags or Open Tags&lt;/strong&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;?php ?&amp;gt;&lt;/code&gt;&lt;br /&gt;
O mais usado usado, e com certeza a melhor solução, por causa da compatibilidade com versões anteriores, e é garantido que não poderão ser desabilitado alterando o arquivo de configuração do php.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Short Open Tags&lt;/strong&gt; &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;? ?&amp;gt;&lt;/code&gt; &lt;br /&gt;
Seu uso é desencorajado pois esse recurso só está disponível quando é habilitado a diretiva &lt;code class=&quot;highlighter-rouge&quot;&gt;short_open_tag&lt;/code&gt; no &lt;em&gt;php.ini&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Echo tag&lt;/strong&gt;  &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;?= ?&amp;gt;&lt;/code&gt;  &lt;br /&gt;
Comummente usado em arquivo de template. A parti da versão 5.4.0 sempre estará disponível, independente do da configuração &lt;code class=&quot;highlighter-rouge&quot;&gt;short_open_tag&lt;/code&gt; no &lt;em&gt;php.ini&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ASP Tags&lt;/strong&gt;  &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;% %&amp;gt;&lt;/code&gt;  &lt;br /&gt;
É considerado obsoleto, e seu uso é desencorajado pois na verão 7 ele foi removido, por motivos de causar conflitos com linguagens de marcação como XML.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Script Tags&lt;/strong&gt; &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script language=&quot;php&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;  &lt;br /&gt;
Também foi removido da versão 7 do  PHP.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;problema-com-as-tags&quot;&gt;Problema com as Tags&lt;/h2&gt;
&lt;p&gt;Ao criar arquivos PHP que não se misturam com HTML ou arquivos de template, geralmente em arquivos de classes, configurações e etc, recomenda-se não usar tag de fechamento &lt;code class=&quot;highlighter-rouge&quot;&gt;?&amp;gt;&lt;/code&gt;. Pois caso exista um espaço ou quebra de linha após a tag de fechamento, essa espaço ou quebra de linha será exibido na resposta da requisição, e é algo bem difícil de se acha quando se tem um projeto com muitos arquivos, e isso pode trazer algumas horas de dor de cabeça.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;aspas&quot;&gt;Aspas&lt;/h2&gt;
&lt;p&gt;No PHP para exibir um texto qualquer, você pode usar tanto aspas duplas &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&lt;/code&gt; quanto aspas simples &lt;code class=&quot;highlighter-rouge&quot;&gt;'&lt;/code&gt;, exemplo:
* &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;?=&quot;PHP BOOK&quot;?&amp;gt;&lt;/code&gt; saida: &lt;code class=&quot;highlighter-rouge&quot;&gt;PHP BOOK&lt;/code&gt;
* &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;?='PHP BOOK'?&amp;gt;&lt;/code&gt; saida: &lt;code class=&quot;highlighter-rouge&quot;&gt;PHP BOOK&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A diferença acontece quando você tenta mescla esse texto com uma variável, exemplo:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; 

&lt;span class=&quot;nv&quot;&gt;$variael&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;texto qualquer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;variável: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$variavel&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// variável: texto qualquer
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'variável: $variavel'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// variável: $variavel
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Repare que na primeira exibição, a variável foi reconhecida e seu valor foi impresso na resposta junto com o texto, já na segunda exibição, foi impresso o texto puro e a variável não foi reconhecida. Quando se usa aspas duplas, você consegue mesclar variáveis em strings.&lt;/p&gt;

&lt;p&gt;O PHP consegue identificar a variável fazendo com que seu valor seja retornado na exibição, assim evitando está concatenando string com variáveis. &lt;br /&gt;
Outra forma valida e a mais usada é quando se usa chaves envolvendo a variável.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; 

&lt;span class=&quot;nv&quot;&gt;$variavel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;texto qualquer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;variável: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$variavel&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// variável: texto qualquer
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'variável: {$variavel}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// variável: {$variavel}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;As palavas reservadas &lt;code class=&quot;highlighter-rouge&quot;&gt;print&lt;/code&gt; e &lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt; são as mais usadas para exibir algo na resposta da requisição.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;concatenao-de-strings&quot;&gt;Concatenação de Strings&lt;/h2&gt;
&lt;p&gt;Para fazer uso da concatenação (ou junção de strings), você precisa usar o ponto (&lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt;), sempre colocando entre duas variáveis ou entre duas strings, entre uma string e o retorno de uma função/método.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; 

&lt;span class=&quot;nv&quot;&gt;$string_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;texto&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$string_2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; qualquer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;funcao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'texto'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; qualquer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$string_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$string_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// texto qualquer
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;texto&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$string_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// texto qualquer
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;texto&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; qualquer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// texto qualquer
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;retorno: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;funcao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// retorno: texto qualquer
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;comentrios&quot;&gt;Comentários&lt;/h2&gt;
&lt;p&gt;Assim como em outras linguagens, o PHP possui dois tipo de comentários, de “uma linha” e de “varias linhas”. O PHP suporta comentários no estilo ‘C’, ‘C++’ e do Unix shell (estilo Perl). Por exemplo:
&lt;code class=&quot;highlighter-rouge&quot;&gt;php
&amp;lt;?php
    echo 'Isto é um teste'; // Estilo de comentário de uma linha em  c++
    /* Este é um comentário de múltiplas linhas
       ainda outra linha de comentário */
    echo 'Isto é ainda outro teste';
    echo 'Um teste final'; # Este é um comentário de uma linha no estilo shell
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Os comentários de estilo “uma linha” apenas comentam até o final da linha ou do bloco PHP de código corrente&lt;/p&gt;

&lt;p&gt;Ao tentar comentar grandes blocos de código, podemos cometer o seguinte equivoco:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
 &lt;span class=&quot;cm&quot;&gt;/*
    echo 'Isto é um teste'; /* Este comentário irá causar um problema */&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;bloco-de-codigo&quot;&gt;Bloco de codigo&lt;/h2&gt;
&lt;p&gt;O PHP usa como delimitador de bloco de código as chaves &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;/code&gt; exemplo:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ZCE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# bloco de código  
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Programador&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ZCE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# bloco de código
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$programador&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Programador&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$programador&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ZCE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# bloco de código
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# bloco de código
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;o-interpretador-php&quot;&gt;O interpretador PHP&lt;/h2&gt;
&lt;p&gt;Como já foi dito PHP consegue se mistura com outros tipos de arquivos ou documentos e o interpretador consegue detectar comandos PHP dentro desse arquivo, até mesmo não sendo um arquivo com a extensão &lt;code class=&quot;highlighter-rouge&quot;&gt;.php&lt;/code&gt; veja:&lt;/p&gt;

&lt;p&gt;usuarios.xml&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-XML&quot;&gt;&amp;lt;?php foreach(['Alef', 'Sara', 'Liana'] as $nome): ?&amp;gt;
    &amp;lt;usuario nome=&quot;&amp;lt;?php print $nome ?&amp;gt;&quot; /&amp;gt;
&amp;lt;?php endforeach; ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;index.php&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-PHP&quot;&gt;&amp;lt;?php
header(&quot;Content-type: text/xml&quot;);
// Cabeçalho XML
print &quot;&amp;lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&amp;gt;&quot;;
// Abrindo tag que contém a lista de usuários
print &quot;&amp;lt;lista-usuarios&amp;gt;&quot;;
// repare que está sendo incluindo um arquivo do tipo XML com código PHP dentro.
require_once 'usuarios.xml'; 
// Fechando tag que contém a lista de usuários
print &quot;&amp;lt;/lista-usuarios&amp;gt;&quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Saída:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-XML&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;lista-usuarios&amp;gt;
    &amp;lt;usuario nome=&quot;Alef&quot; /&amp;gt;
    &amp;lt;usuario nome=&quot;Sara&quot; /&amp;gt;
    &amp;lt;usuario nome=&quot;Liana&quot; /&amp;gt;
&amp;lt;/lista-usuarios&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;Próximo assunto: &lt;a href=&quot;./variables.html&quot;&gt;Variables&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 29 Jul 2016 13:11:37 -0300</pubDate>
        <link>alefcastelo.github.io/zce-book/php-basics/syntax.html</link>
        <guid isPermaLink="true">alefcastelo.github.io/zce-book/php-basics/syntax.html</guid>
        
        
        <category>php-basics</category>
        
      </item>
    
      <item>
        <title>Readme</title>
        <description>&lt;h1 id=&quot;web-features&quot;&gt;Web Features&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Sessions&lt;/li&gt;
  &lt;li&gt;Forms&lt;/li&gt;
  &lt;li&gt;GET and POST data&lt;/li&gt;
  &lt;li&gt;Cookies&lt;/li&gt;
  &lt;li&gt;HTTP Headers&lt;/li&gt;
  &lt;li&gt;HTTP Authentication&lt;/li&gt;
  &lt;li&gt;HTTP Status Codes&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 29 Jul 2016 13:06:02 -0300</pubDate>
        <link>alefcastelo.github.io/zce-book/README.html</link>
        <guid isPermaLink="true">alefcastelo.github.io/zce-book/README.html</guid>
        
        
      </item>
    
      <item>
        <title>Readme</title>
        <description>&lt;h1 id=&quot;strings--patterns&quot;&gt;Strings &amp;amp; Patterns&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Quoting&lt;/li&gt;
  &lt;li&gt;Matching&lt;/li&gt;
  &lt;li&gt;Extracting&lt;/li&gt;
  &lt;li&gt;Searching&lt;/li&gt;
  &lt;li&gt;Replacing&lt;/li&gt;
  &lt;li&gt;Formatting&lt;/li&gt;
  &lt;li&gt;PCRE&lt;/li&gt;
  &lt;li&gt;NOWDOC&lt;/li&gt;
  &lt;li&gt;Encodings&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 29 Jul 2016 13:06:02 -0300</pubDate>
        <link>alefcastelo.github.io/zce-book/README.html</link>
        <guid isPermaLink="true">alefcastelo.github.io/zce-book/README.html</guid>
        
        
      </item>
    
      <item>
        <title>Readme</title>
        <description>&lt;h1 id=&quot;security&quot;&gt;Security&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Configuration&lt;/li&gt;
  &lt;li&gt;Session Security&lt;/li&gt;
  &lt;li&gt;Cross-Site Scripting&lt;/li&gt;
  &lt;li&gt;Cross-Site Request Forgeries&lt;/li&gt;
  &lt;li&gt;SQL Injection&lt;/li&gt;
  &lt;li&gt;Remote Code Injection&lt;/li&gt;
  &lt;li&gt;Email Injection&lt;/li&gt;
  &lt;li&gt;Filter Input&lt;/li&gt;
  &lt;li&gt;Escape Output&lt;/li&gt;
  &lt;li&gt;Encryption, Hashing algorithms&lt;/li&gt;
  &lt;li&gt;File uploads&lt;/li&gt;
  &lt;li&gt;PHP Configuration&lt;/li&gt;
  &lt;li&gt;Password hashing API&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 29 Jul 2016 13:06:02 -0300</pubDate>
        <link>alefcastelo.github.io/zce-book/README.html</link>
        <guid isPermaLink="true">alefcastelo.github.io/zce-book/README.html</guid>
        
        
      </item>
    
      <item>
        <title>Variables</title>
        <description>&lt;h1 id=&quot;variables&quot;&gt;Variables&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introdução&quot;&gt;Introdução&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#sintaxe-válida&quot;&gt;Sintaxe Válida&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tipo-de-variáveis&quot;&gt;Tipo de variáveis&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#passagem-de-valor&quot;&gt;Passagem de valor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conversão-de-tipos&quot;&gt;Conversão de tipos&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#detectando-tipos&quot;&gt;Detectando tipos&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#variáveis-variáveis&quot;&gt;Variáveis Variáveis&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#constantes&quot;&gt;Constantes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;introduo&quot;&gt;Introdução&lt;/h2&gt;
&lt;p&gt;As variáveis no PHP são representadas por um cifrão ($) seguido pelo nome da variável. Os nomes de variável são case-sensitive (isso significa que as variaveis fazem diferença do maiúsculo do minusculo). O PHP é uma linguagem de tipagem dinâmica. Assim sendo, o valor que o programador atribuir a variável é que vai determinar o tipo de dado que ela irá armazenar.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$nome = &quot;Alef&quot;;
$NOME = 4134;
print $nome; // Alef (string)
print $NOME; // 4137 (int)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;sintaxe-vlida&quot;&gt;Sintaxe Válida&lt;/h2&gt;
&lt;p&gt;As variáveis no PHP só podem começar com letras e underscore, variáveis que começam com números o PHP lançará um erro informando que a variavel é invalida.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;print $1banana; // PHP Parse error
print $banana; // valido
print $_banana; // valido
print $_banana; // valido
print $_maçã; // valido
print $maçã; // valido
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$this&lt;/code&gt; é uma variável especial que não pode ser atribuída. Caso queira atribuir um valor para ela, o PHP lançará o seguinte erro: &lt;code class=&quot;highlighter-rouge&quot;&gt;PHP Fatal error:  Cannot re-assign $this&lt;/code&gt;;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;tipo-de-variveis&quot;&gt;Tipo de variáveis&lt;/h2&gt;
&lt;p&gt;O PHP suporta oito tipos primitivos.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Escalares&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Compostos&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Especiais&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;boolean&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;array&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;resource&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;integer&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;object&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;NULL&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;float (número de ponto flutuante, ou também double)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;string&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Porém existe pseudo-tipos:
* Mixed
* Number
* Callback (ou callable)
* Array | Object
* Void&lt;/p&gt;

&lt;p&gt;Veja mais em http://php.net/manual/pt_BR/language.types.intro.php&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;passagem-de-valor&quot;&gt;Passagem de valor&lt;/h2&gt;
&lt;p&gt;Você pode usar duas formas de atribuir um valor a uma variável, a passagem por valor e por referência. A passagem por valor continua da forma a qual já virmos anteriormente, porém a passagem por referencia, precisamos colocar o caractere &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; antes do &lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt; para informa que aquela variável irá receber uma referência e não a copia do valor.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Passagem por valor
$a = 1;
$b = $a;
$b = 8;
$a = 2;
print $a; // 2
print $b; // 8

// Passagem por Referência
$a = 1;
$b = &lt;span class=&quot;ni&quot;&gt;&amp;amp;$a;&lt;/span&gt;
$b = 8;
$a = 2;
print $a; // 2
print $b; // 2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;converso-de-tipos&quot;&gt;Conversão de tipos&lt;/h2&gt;
&lt;p&gt;O PHP não obriga (ou suporta) a definição de tipo explícita na declaração de variáveis: o tipo de uma variável é determinado pelo contexto em que a variável é utilizada. Um exemplo da conversão automática do PHP é o operador de adição ‘+’.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// $var é string (ASCII 48)
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// $var é agora um interio (2)
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// $var é agora um float (3.3)
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;10 pequenos porcos&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// $var é inteiro (15)
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;10 minúsculos porcos&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// $var é inteiro (15)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;A conversão de tipos no PHP funciona como no C: o nome de um tipo desejado é escrito entre parênteses antes da variável que se deseja converter.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;print_r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'esporte'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Judô'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'atleta'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Alef'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/*
  O resultado da conversão retornará um objeto do tipo stdClass
  stdClass Object
  (
    [esporte] =&amp;gt; Judô
    [atleta] =&amp;gt; Alef
  )
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As conversões permitidas são:
* (int), (integer) - molde para inteiro
* (bool), (boolean) - converte para booleano
* (float), (double), (real) - converte para número de ponto flutuante
* (string) - converte para string
* (array) - converte para array
* (object) - converte para objeto
* (unset) - converte para NULL (PHP 5)&lt;/p&gt;

&lt;p&gt;Porém existe outras funções que permite fazer a conversão dessas variáveis.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Função&lt;/th&gt;
      &lt;th&gt;Resultado&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;intval()&lt;/td&gt;
      &lt;td&gt;Converte para &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;floatval()&lt;/td&gt;
      &lt;td&gt;Converte para &lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;strval()&lt;/td&gt;
      &lt;td&gt;Converte para &lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;boolval()&lt;/td&gt;
      &lt;td&gt;Converte para &lt;code class=&quot;highlighter-rouge&quot;&gt;boolean&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;settype()&lt;/td&gt;
      &lt;td&gt;Converte a variável para qualquer tipo&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Exemplo:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;boolval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// bool(true)
&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;settype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;int&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// int(1)
&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;settype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;double&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// double(1)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;detectando-tipos&quot;&gt;Detectando tipos&lt;/h2&gt;
&lt;p&gt;O PHP possui funções que permite detectar o tipo de cada variável. Se a variável possui o tipo especificado a função irá retornar &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Função&lt;/th&gt;
      &lt;th&gt;Resultado&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;is_int()&lt;/td&gt;
      &lt;td&gt;Verifica se é do tipo &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;is_float()&lt;/td&gt;
      &lt;td&gt;Verifica se é do tipo &lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;is_string()&lt;/td&gt;
      &lt;td&gt;Verifica se é do tipo &lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;is_bool()&lt;/td&gt;
      &lt;td&gt;Verifica se é do tipo &lt;code class=&quot;highlighter-rouge&quot;&gt;boolean&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;is_null()&lt;/td&gt;
      &lt;td&gt;Verifica se é do tipo &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;is_array()&lt;/td&gt;
      &lt;td&gt;Verifica se é do tipo &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;is_object()&lt;/td&gt;
      &lt;td&gt;Verifica se é do tipo &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;variveis-variveis&quot;&gt;Variáveis Variáveis&lt;/h2&gt;
&lt;p&gt;As vezes, é conveniente possuir variáveis com nomes variáveis. Isto é, o nome de uma variável que pode ser definido e utilizado dinamicamente.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$nome&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Alef'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$$nome&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Castelo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$nomecompleto&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$nome&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; ${$nome}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$nomecompleto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Alef Castelo
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Porém seu uso fica mais claro, quando se tenta definir o valor de uma propriedade de uma classe de forma dinâmica.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; 

&lt;span class=&quot;c1&quot;&gt;// Suponha que Você recebeu uma requisição GET com a URI: http://localhost/index.php?var=nome&amp;amp;valor=alef
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Usuario&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$nome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$sobrenome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$usuario&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Usuario&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'var'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt; 
   &lt;span class=&quot;nv&quot;&gt;$var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'var'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    
&lt;span class=&quot;nv&quot;&gt;$usuario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'valor'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/*
    isso =&amp;gt; $usuario-&amp;gt;$var = $_GET['valor'];
    é a mesma coisa disso =&amp;gt; $usuario-&amp;gt;nome = $_GET['valor']; 
*/&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$usuario&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/*
  A Saida será:
  object(Usuario)[1]
    public 'nome' =&amp;gt; string 'alef' (length=4)
    public 'sobrenome' =&amp;gt; null
  
*/&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Outra forma de acessa essas variaveis são:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'nome'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$$var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Alef Castelo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'nome'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// Alef Castelo
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;${$var}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// Alef Castelo
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Alef Castelo
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;constantes&quot;&gt;Constantes&lt;/h2&gt;
&lt;p&gt;Constante, é um identificador para uma variável a qual seu valor não poderá ser alterado depois de sua declaração. Exceto as constantes mágicas, que não são constantes de verdade. As constantes são case-sensitive por padrão. Por convenção, identificadores de constantes são sempre em maiúsculas. Sua declaração é simples, veja:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;URL&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http://google.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;VERSAO&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;v1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// http://google.com
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;VERSAO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// v1
&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CONSTANTE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Constante&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CONSTANTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;// Constante
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;constant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CONSTANTE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// mesma coisa que a linha anterior
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Você pode definir as constante em caixa baixa, porém por conversão elas devem ser criadas em caixa alta.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Usando &lt;code class=&quot;highlighter-rouge&quot;&gt;define('CONSTANTE', 'valor da constante')&lt;/code&gt; dentro de uma classe não funciona, você precisa usar a palavra reservada &lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Projeto&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NOME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Projeto'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Livro&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NOME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Livro'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$const&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'NOME'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;constant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Projeto::'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$const&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// string(7) &quot;Projeto&quot;
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Projeto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;NOME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// string(7) &quot;Projeto&quot;
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;constant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Livro::'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$const&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// string(5) &quot;Livro&quot;
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Livro&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;NOME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// string(5) &quot;Livro&quot;
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Fora do escopo da classe a palavra reservada &lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt; também ira criar uma constante.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NOME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;__LINE__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NOME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;O PHP possui oito constantes mágicas, sua característica é que o valor muda de acordo com o contexto que ela é usada. Por exemplo, o valor de &lt;strong&gt;__LINE__&lt;/strong&gt; depende da linha em que é utilizada em seu script. Essas constantes especiais são case-insentitive:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;IConstante&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NOME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__CLASS__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ZCEBook&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NOME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__CLASS__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$const&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'NOME'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;constant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'IConstante::'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$const&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// string(10) &quot;IConstante&quot;
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;IConstante&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;NOME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// string(10) &quot;IConstante&quot;
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;constant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ZCEBook::'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$const&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// string(7) &quot;ZCEBook&quot;
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ZCEBook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;NOME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// string(7) &quot;ZCEBook&quot;
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Constante&lt;/th&gt;
      &lt;th&gt;Resultado&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;__LINE__&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;O número da linha corrente do arquivo.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;__FILE__&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;O caminho completo e nome do arquivo com links simbólicos resolvidos. Se utilizado dentro de um include, o nome do arquivo incluído será retornado.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;__DIR__&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;O diretório do arquivo. Se usado dentro de um include, o diretório do arquivo incluído é retornado. É equivalente a dirname(&lt;strong&gt;__FILE__&lt;/strong&gt;). O nome do diretório não possui barra no final, a não ser que seja o diretório raiz.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;__FUNCTION__&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;O nome da função.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;__CLASS__&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;O nome da classe. O nome da classe inclui o namespace em que foi declarado (por exemplo, Foo\Bar). Note que a partir do PHP 5.4, &lt;strong&gt;__CLASS__&lt;/strong&gt; também funcionará em traits. Quando utilizada em um método trait, __CLASS__ é o nome da classe que está utilizando a trait.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;__TRAIT__&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;O nome do trait. O nome do trait inclui o namespace em que foi declarado (por exemplo, Foo\Bar).&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;__METHOD__&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;O nome do método da classe.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;__NAMESPACE__&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;O nome do namespace atual.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;p&gt;Próximo assunto: &lt;a href=&quot;operators&quot;&gt;Operators&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 29 Jul 2016 13:06:02 -0300</pubDate>
        <link>alefcastelo.github.io/zce-book/variables.html</link>
        <guid isPermaLink="true">alefcastelo.github.io/zce-book/variables.html</guid>
        
        
      </item>
    
      <item>
        <title>Operators</title>
        <description>&lt;h1 id=&quot;operators&quot;&gt;Operators&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#o-que-são-operadores&quot;&gt;O que são operadores?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#operadores-de-atribuição&quot;&gt;Operadores de Atribuição&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#operadores-aritméticos&quot;&gt;Operadores Aritméticos&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#operadores-de-comparação&quot;&gt;Operadores de Comparação&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#precedência-de-operadores&quot;&gt;Precedência de Operadores&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#operadores-bit-a-bit-bitwise&quot;&gt;Operadores bit a bit - bitwise&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#operadores-de-controle-de-erro&quot;&gt;Operadores de controle de erro&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#operadores-de-execução&quot;&gt;Operadores de Execução&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#operadores-de-incremento-decremento&quot;&gt;Operadores de Incremento/Decremento&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#operadores-lógicos&quot;&gt;Operadores Lógicos&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#operadores-de-string&quot;&gt;Operadores de String&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#operadores-de-arrays&quot;&gt;Operadores de Arrays&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#operadores-de-tipo&quot;&gt;Operadores de tipo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;o-que-so-operadores&quot;&gt;O que são operadores?&lt;/h2&gt;

&lt;p&gt;Um operador é uma estrutura que recebe um ou mais valores (ou expressões, no jargão de programação) e que devolve outro valor. O conhecimento desses operadores é de fundamental importância para todo programador que deseja possuir certificação. E o PHP possui muito desses operadores, os mais usados são:
* &lt;a href=&quot;#operadores-de-atribuição&quot;&gt;Operadores de Atribuição&lt;/a&gt;
* &lt;a href=&quot;#operadores-aritméticos&quot;&gt;Operadores Aritméticos&lt;/a&gt;
* &lt;a href=&quot;#operadores-de-string&quot;&gt;Operadores de String&lt;/a&gt;
* &lt;a href=&quot;#operadores-de-comparação&quot;&gt;Operadores de Comparação&lt;/a&gt;
* &lt;a href=&quot;#operadores-lógicos&quot;&gt;Operadores Lógicos&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;operadores-aritmticos&quot;&gt;Operadores Aritméticos&lt;/h2&gt;
&lt;p&gt;Acredito que a própria explicação matemática já é o suficiente. Com base no Wikipedia: “A aritmética é o ramo da matemática que lida com números e com as operações possíveis entre eles”.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Adição&lt;/strong&gt; - Utiliza o sinal de (&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;) para expressar que a operação de adição/soma será executada.   &lt;br /&gt;
Exemplo:&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;php
&amp;lt;?php
$a = 3;
$b = 2;
$c = $a + $b;
print $c; // 5
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Subtração&lt;/strong&gt; - Faz uso do sinal de (&lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;) para expressar que a operação de subtração será executada.  &lt;br /&gt;
Exemplo:&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;php
&amp;lt;?php
$a = 3;
$b = 2;
$c = $a - $b;
print $c; // 1
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Multiplicação&lt;/strong&gt; - Utiliza o sinal de (&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;) para expressar que a operação de multiplicação será executada.&lt;br /&gt;
Exemplo:&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;php
&amp;lt;?php
$a = 3;
$b = 2;
$c = $a * $b;
print $c; // 6
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Divisão - Frações&lt;/strong&gt; - Faz uso do sinal de (&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;) para expressar que a operação de divisão será executada.&lt;br /&gt;
Exemplo:&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;php
&amp;lt;?php
$a = 3;
$b = 2;
$c = $a / $b;
print $c; // 1.5
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Um outro operador muito usado é o de &lt;strong&gt;Módulo&lt;/strong&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;%&lt;/code&gt;), com esse operador é possível capturar o resto da divisão, diferente do operador de divisão (&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;) que retorna o &lt;code class=&quot;highlighter-rouge&quot;&gt;quociente da divisão&lt;/code&gt;. &lt;br /&gt;
Exemplo:&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;php
&amp;lt;?php
$a = 3;
$b = 2;
$c = $a % $b;
print $c; // 1
&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Negação&lt;/strong&gt; - Faz uso do sinal de (&lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;), porém o seu uso é antes do valor/variável, isso faz com que nesse momento o valor seja o oposto do original, fazendo a troca de positivo para negativo ou de negativo para positivo. 
Exemplo:&lt;br /&gt;
```php
&amp;lt;?php
$a = 3;
$b = 2;
$c = $a + -$b;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;/*
Repare que $b possui o sinal (-) entes do sinal ($), isso indica
que a variável inverterá o seu valor fazendo com que o retorno
da soma seja 1, diferente do exemplo do operador de adição.
*/
print $c; // 1&lt;/p&gt;

&lt;p&gt;/*
Mais uma vez se nergamos o valor de $c, ele de positivo ficará negativo
*/
print -$c; // -1&lt;/p&gt;

&lt;p&gt;/*
Mais uma vez se nergamos o valor de $c o seu resultado continuará
negativo. Isso acontece por causa do escopo que está sendo usando
em print, que não permite que o valor original de $c seja alterado,
somente sua saida irá sofrermudanças.
*/
print -$c; // -1&lt;/p&gt;

&lt;p&gt;/*
Porém ao fazer isso o valor original será trocado pois o escopo mudou
e agora você está informando que está mudando o valor da variável e
não da saida dela.
*/
$c = -$c;&lt;br /&gt;
print -$c; // 1&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
* **Exponencial**  - Introduzido no PHP 5.6, faz uso do sinal de (`**`).
Exemplo:  
```php
&amp;lt;?php
$a = 3;
$b = 2;
$c = $a ** $b;
print $c; // 9
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Fri, 29 Jul 2016 13:06:02 -0300</pubDate>
        <link>alefcastelo.github.io/zce-book/operators.html</link>
        <guid isPermaLink="true">alefcastelo.github.io/zce-book/operators.html</guid>
        
        
      </item>
    
      <item>
        <title>Readme</title>
        <description>&lt;h1 id=&quot;object-oriented-programming&quot;&gt;Object Oriented Programming&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Instantiation&lt;/li&gt;
  &lt;li&gt;Modifiers/Inheritance&lt;/li&gt;
  &lt;li&gt;Interfaces&lt;/li&gt;
  &lt;li&gt;Exceptions&lt;/li&gt;
  &lt;li&gt;Autoload&lt;/li&gt;
  &lt;li&gt;Reflection&lt;/li&gt;
  &lt;li&gt;Type Hinting&lt;/li&gt;
  &lt;li&gt;Class Constants&lt;/li&gt;
  &lt;li&gt;Late Static Binding&lt;/li&gt;
  &lt;li&gt;Magic (_*) Methods&lt;/li&gt;
  &lt;li&gt;Instance Methods &amp;amp; Properties&lt;/li&gt;
  &lt;li&gt;SPL&lt;/li&gt;
  &lt;li&gt;Traits&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 29 Jul 2016 13:06:02 -0300</pubDate>
        <link>alefcastelo.github.io/zce-book/README.html</link>
        <guid isPermaLink="true">alefcastelo.github.io/zce-book/README.html</guid>
        
        
      </item>
    
      <item>
        <title>Motivacao</title>
        <description>&lt;h1 id=&quot;motivao&quot;&gt;Motivação&lt;/h1&gt;

&lt;p&gt;Tenho como motivação tira a certificação PHP os seguintes item da lista abaixo:
* Testa meus conhecimentos, uma forma de provar para mim mesmo que eu tenho conhecimento na linguagem.
* Realmente acredito que ela pode ser uma porta para novas oportunidades.
* Acredito que terei mais credibilidade quando irei dar um opinião ou expressar um pensamento sobre PHP.
* E acho que por essa certificação ser tão difícil creio que é um ótimo desafio.&lt;/p&gt;
</description>
        <pubDate>Fri, 29 Jul 2016 13:06:02 -0300</pubDate>
        <link>alefcastelo.github.io/zce-book/motivacao.html</link>
        <guid isPermaLink="true">alefcastelo.github.io/zce-book/motivacao.html</guid>
        
        
      </item>
    
  </channel>
</rss>
